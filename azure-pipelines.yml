# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: Default
  

steps:

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
  
- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/infrastructure/azure'
    Contents: |
      aks/**
      !.git/**/*
    TargetFolder: '$(Build.ArtifactStagingDirectory)/akscluster'

- task: TerraformInstaller@1
  displayName: 'Terraform Installation'
  inputs:
    terraformVersion: 'latest'
- task: TerraformTaskV4@4
  displayName: 'Terraform Initialization'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(Build.SourcesDirectory)/infrastructure/azure/aks'
    backendServiceArm: 'TfConnection'
    backendAzureRmResourceGroupName: 'tfstate'
    backendAzureRmStorageAccountName: 'tfstateravi2408'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'terraform.tfstate'
- task: TerraformTaskV4@4
  displayName: 'Terraform Validate'
  inputs:
    provider: 'azurerm'
    command: 'validate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/azure/aks'
- task: TerraformTaskV4@4
  displayName: 'Terraform Plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/azure/aks'
    commandOptions: '-out=tfplan.binary'
    environmentServiceNameAzureRM: 'TfConnection'

- script: terraform show -json tfplan.binary > main.tfplan.json
  displayName: 'terraform show'
  workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/azure/aks'

- script: type C:\agent\_work\1\s\infrastructure\azure\aks\main.tfplan.json
  displayName: 'Debug: Print JSON Plan File'

- task: tfsec@1
  inputs:
    version: 'v1.26.0'
    dir: '$(System.DefaultWorkingDirectory)/infrastructure/azure/aks'

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.10'
    addToPath: true
    architecture: 'x64'
- script: |
    pip install --upgrade pip
    pip install pytest terraform-compliance
    terraform-compliance -p main.tfplan.json -f features/compliance --junit-xml results.xml
    echo scancomplete
  displayName: 'Install terraform-compliance with pip'
  workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/azure/aks
  continueOnError: true

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '$(System.DefaultWorkingDirectory)/infrastructure/azure/aks/*.xml'
    testResultsFormat: 'JUnit'
    testRunTitle: 'JUnit Test Results'
  displayName: 'Publish JUnit Test Results'
- task: PublishBuildArtifacts@1
  displayName: 'Publishing the Artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/akscluster'
    ArtifactName: 'drop'
    publishLocation: 'Container'
